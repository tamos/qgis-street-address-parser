# -*- coding: utf-8 -*-
"""
/***************************************************************************
 StreetAddressParser
                                 A QGIS plugin
 Parse street addresses
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-09-24
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Tyler Amos
        email                : tyler.amos@alumni.carleton.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .street_address_parser_dialog import StreetAddressParserDialog
import os.path
from qgis.PyQt.QtCore import QVariant
from qgis.core import (QgsProject, QgsMessageLog, QgsVectorLayer, QgsField,
                        QgsFeature, QgsGeometry, QgsPointXY, QgsWkbTypes)
import os
import sys


# qgis is still struggling with how to install external dependencies
# https://github.com/qgis/QGIS-Enhancement-Proposals/issues/202
# potential solution is to run this as a (heroku) web app service
# that just spins up the model and responds to the queries?
# append paths of dependencies in wheel files
try:
    import requests
except ImportError:
    this_dir = os.path.dirname(os.path.realpath(__file__))
    wheels_dir = os.path.join(this_dir, 'wheels')
    wheels_available = os.listdir(wheels_dir)
    for i in wheels_available:
        path = os.path.join(wheels_dir, i)
        sys.path.append(path)
    for i in sys.path:
        QgsMessageLog.logMessage(i)
    import requests


class StreetAddressParser:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.project = QgsProject.instance()
        self.root = self.project.layerTreeRoot()
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'StreetAddressParser_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Street Address Parser')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self._lyr_list = None
        self.parse_res_fields = ['StreetNumber', 'StreetName', 'Unit', 'Municipality',
                                'Province', 'PostalCode', 'Orientation', 'GeneralDelivery']
        self.api_url = 'http://localhost:5000/parse'

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('StreetAddressParser', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/street_address_parser/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Parse street addresses'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Street Address Parser'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.dlg = StreetAddressParserDialog()

        # show the dialog
        self.dlg.show()
        self.dlg.lyr_select.clear()
        # ref  https://www.qgistutorials.com/en/docs/building_a_python_plugin.html
        # add list of layers to the first selector box
        self.dlg.lyr_select.addItems([i.name() for i in self.layer_list])
        self.dlg.lyr_select.currentIndexChanged.connect(self.update_fields)
        self.update_fields() # just make sure we have this loaded for open

        # execute, which happens after ok
        result = self.dlg.exec_()
        if result:
            target_field = self.get_field_select_field()
            if target_field.typeName() != 'String':
                raise TypeError("Target field is not string!")
            # here is where we do the parsing
            self.make_new_layer()


    #def setup_parser(self):
        # load and install deepparse
        # fetch model or use one on disk
        #self.parser = AddressParser(model_type = 'fasttext-light') # if download
        # or maybe something like this if instead we put the model in with the source
        #self.parser = AddressParser(path_to_retrained_model = os.path.join(plugins_dir, 'street_address_parser', 'models', 'model_name'))
        #self.parser = lambda x: x


    def make_new_layer(self):
        #           Set Up
        # https://docs.qgis.org/3.16/en/docs/pyqgis_developer_cookbook/vector.html#from-an-instance-of-qgsvectorlayer
        lyr_select = self.get_lyr_select_layer()
        field_select = self.get_field_select_field()
        field_idx = self.get_selected_field_idx()
        geom_type = QgsWkbTypes.displayString(lyr_select.wkbType())
        name = lyr_select.name() + "parsed"
        location = "memory"
        # to do, account for different location, etc
        # create layer
        vl = QgsVectorLayer(geom_type, name, location)
        pr = vl.dataProvider()


        #              Add Fields
        fields = lyr_select.fields().toList() # field list
        ty = lambda x: QVariant.typeToName(x) # type converter
        # add attributes to the layer the same as the starting layer
        # ref https://gis.stackexchange.com/questions/368667/qgis-how-to-find-qvariant-of-existing-attribute
        # make fields for the original data in the layer
        parsed_fields =  [QgsField(j) for j in fields]
        for i in self.parse_res_fields:
            # now add the fields we for parsed results as their names, string
            parsed_fields.append(QgsField(i, QVariant.String, len = 100))
        pr.addAttributes(parsed_fields)
        vl.updateFields() # tell the vector layer to fetch changes from the provider

        #           Add Features
        for each_feature in lyr_select.getFeatures():
            fet = QgsFeature() # create new feature
            fet.setGeometry(each_feature.geometry()) # copy geometry
            each_feat_attrs = each_feature.attributes() # get old feature attrs

            #       Parse Addresses
            # placeholder code until parser works
            # parse address field with deepparse model
            #parse_rv = self.parser(each_feat_attrs[field_idx])#.to_dict()
            #parsed_results = [parse_rv[i] for i in self.parse_res_fields]
            parse_rv = requests.get(self.api_url,
                data = dict(address=each_feat_attrs[field_idx]))
            # default return value in case we failed
            parsed_results = [None] * len(self.parse_res_fields)
            if parse_rv.ok:
                parse_rv = parse_rv.json()
                if parse_rv['status'] == 'Success':
                    # unpack results
                    addr = parse_rv['parsed']['parsed_address']
                    parsed_results = []
                    for i in self.parse_res_fields:
                        parsed_results.append(self.clean_component(addr[i]))
            # set attributes of feature as old + parsed fields
            fet.setAttributes(each_feat_attrs + parsed_results)
            pr.addFeatures([fet]) # push feature to the layer


        #           Finish up
        # update layer's extent when new features have been added
        # because change of extent in provider is not propagated to the layer
        vl.updateExtents()
        # ref https://gis.stackexchange.com/questions/70135/how-can-i-define-the-layer-crs-for-a-memory-layer-in-pyqgis
        # set the crs to be the same as the layer we copied from
        vl.setCrs(lyr_select.crs())
        self.project.addMapLayer(vl) # add the new layer to the map

    def clean_component(self, s):
        if s is not None and isinstance(s, str):
            return s.strip().strip(",").strip(".")
        else:
            return s


    def update_fields(self):
        # if we change the layer, then update fields too
        # ref https://gis.stackexchange.com/questions/225557/qgis-plugin-automatically-update-field-names-combo-box-using-data-from-another
        self.dlg.field_select.clear()
        selected = self.get_lyr_select_layer()
        field_names = selected.fields().names()
        self.dlg.field_select.addItems(field_names)

    @property
    def layer_list(self):
        if self._lyr_list is None:
            self._lyr_list = self.root.layerOrder()
        return self._lyr_list

    def get_lyr_select_layer(self):
        idx = self.dlg.lyr_select.currentIndex()
        return self.layer_list[idx]

    def get_field_select_field(self):
        lyr = self.get_lyr_select_layer()
        fields = lyr.fields() # fields in the selected layer
        idx = self.get_selected_field_idx() # where is field selector
        return fields.toList()[idx] # return that field

    def get_selected_field_idx(self):
        return self.dlg.field_select.currentIndex() # where is field selector
